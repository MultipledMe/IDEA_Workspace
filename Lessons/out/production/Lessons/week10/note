@Wrap class & Functions
e.g:
Integer(Wrap)-----int
Integer oi = new Integer(1);//Auto-pack
int i = oi;//Auto-unpack

$imp$  String to int(e.g):

[@WrapClass] [parameter] = [@WrapClass].valueOf([data]);
[@BasicClass] [parameter*] = [parameter].__Value();

Integer oi2 = Integer.valueOf("1",16);//8 is hex.
int i=oi2.intValue();
Long oi3 = Long.valueOf("2");
long j=oi3.longValue();

@CurrentTime
System.CurrentTime  >> get system's time

@SetClass from !Collection
set:Duplicate elements are not allowed.
list:Duplicate elements are allowed.
map:set to maintain key&value

@ArrayList
ArrayList [parameter] = new Arraylist();
[para].add;
[para].remove[index\paras];

@Iterator
$For traversing elements in collections to edit them.
$List supports double-edged traversal

boolean hasNext()   //Return true if next one exists.
Object next()  //Return next ele
void remove()  //Delete present ele

[para]
Iterator [para*] = [para].iterator;
while([para*].hasNext()){
    Object [para**] = [para*].next();
    ...
}

@Set
$Create
HashSet [para] = new Hashset();
TreeSet [para*] = new TreeSet();

$Edit ele
[para].add();
[para*].add();

$Operations
[para].lower([String])  //Make "String" lower
[para].pollFirst()  //Output the first ele
[para].pollLast()  //Output the last ele.
[para].retainAll([para*]) //Make [para] synchronize with [para*]

@External applications Invoke
$Initialize process
Process p = null;

$Operations:
p = [para].exec("[Programme]")
Thread.sleep([int])  //Program pauses or leaves for  [int] milliseconds.
p.destroy()  //Program stops.
